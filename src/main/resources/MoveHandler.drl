#created on: 24-Apr-2012
package uk.ac.imperial.colrdtrls.facts

#list any import classes here.
import uk.ac.imperial.colrdtrls.facts.Tile
import uk.ac.imperial.colrdtrls.facts.Player
import uk.ac.imperial.colrdtrls.facts.Move
import uk.ac.imperial.colrdtrls.facts.Turn
import uk.ac.imperial.colrdtrls.facts.Surrendered
import uk.ac.imperial.colrdtrls.facts.MoveInfringement
import uk.ac.imperial.presage2.util.location.Cell

#declare any global variables here
global org.apache.log4j.Logger moveHandlerLogger

dialect "java" 

declare Move
	@role( event )
end

declare Valid
	move : Move @key
end

declare Processed
	move : Move @key
end

query colour ( Cell l, Colour c )
	Tile ( l := location, c := col )
end

rule "Validate Move"
	salience 10
	when
		// match incoming move which goes from agent's current location
		$m : Move( $p : actor, 
				$to : to, 
				$from: from, 
				from == $p.getLocation(), 
				$t : turn, 
				Math.abs($to.getX() - $from.getX()) <= 1,
				Math.abs($to.getY() - $from.getY()) <= 1 
			)
		// move occurs on current turn
		Turn( $t ;)
		// starts and finishes on tiles
		Tile( location == $from )
		Tile( location == $to )
	then
		insert( new Valid($m) );
		moveHandlerLogger.info("Validated: "+ $m);
end

rule "Invalidate old moves"
	salience 5
	when
		$m1 : Move( $p : actor, $t : turn )
		Valid( $m1 ;)
		$m2 : Move( this != $m1, actor == $p, turn == $t, (this before $m1 || this coincides $m1))
		$v : Valid( $m2 ;)
		Turn( $t ;)
	then
		retract( $v )
		moveHandlerLogger.info("Invalidated: "+ $m2);
end

rule "Handle Move"
	salience -10
    when
        $m : Move( $p : actor )
        Valid ( $m; )
        not ( Processed( $m; ) )
    then
    	moveHandlerLogger.info("Processing: "+ $m);
        modify( $p ) {
        	setLocation($m.getTo())
        }
		insert( new Processed( $m ) );
		
end

query powMove( Player p, Move m )
	m := Move( p := actor, $to : to)
	Surrendered( p := player, $c := colour, count > 0 )
	colour( $to, $c ;)
end

query moved(Player p, Cell from, Cell to, int t)
	$m : Move( p := actor, from := from, to := to, t := turn )
	Valid( $m ;)
	Processed( $m ;)
end

declare Retrieved
	move : Move @key
end

rule "Retrieve Surrendered Tokens"
	when
		$m : Move( $p : actor, $to : to )
		Valid( $m ;)
		Processed( $m ;)
		not Retrieved( $m ;)
		colour( $to, $c ;)
		$s : Surrendered( player == $p, colour == $c, count > 0 )
	then
		modify($s) {
			decrement();
		};
		insert( new Retrieved( $m ));
		moveHandlerLogger.info("Retreived token "+ $c +" from "+ $p);
end

rule "Detect Move infringement"
	when
		$m : Move( $p : actor, $to : to )
		Valid( $m ;)
		Processed( $m ;)
		not Retrieved( $m ;)
		colour( $to, $c ;)
		Surrendered( player == $p, colour == $c, count == 0 )
	then
		// could use logical insert to allow automatic resolution
		insert( new MoveInfringement($p, $m, $c) );
		insert( new Retrieved( $m )); 
		moveHandlerLogger.info("Infringement by "+ $p +" with action "+ $m);
end
